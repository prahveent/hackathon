# Database Setup Verification Script

Write-Host "üîç Verifying Hackathon API Database Setup..." -ForegroundColor Green
Write-Host

# Navigate to the API project
Set-Location "c:\Users\PrahveenT\Documents\Projects\hackathon\backend\HackathonApi"

# Check if EF Core tools are installed
Write-Host "1Ô∏è‚É£ Checking Entity Framework Core tools..." -ForegroundColor Yellow
try {
    $efOutput = dotnet ef --version 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ EF Core tools are installed: $efOutput" -ForegroundColor Green
    } else {
        Write-Host "‚ùå EF Core tools not found. Installing..." -ForegroundColor Red
        dotnet tool install --global dotnet-ef
    }
} catch {
    Write-Host "‚ùå Error checking EF tools: $_" -ForegroundColor Red
}

Write-Host

# Check if the project builds
Write-Host "2Ô∏è‚É£ Building the project..." -ForegroundColor Yellow
$buildResult = dotnet build --verbosity quiet
if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ Project builds successfully" -ForegroundColor Green
} else {
    Write-Host "‚ùå Build failed" -ForegroundColor Red
    exit 1
}

Write-Host

# Check database connection (requires PostgreSQL to be running)
Write-Host "3Ô∏è‚É£ Testing database connectivity..." -ForegroundColor Yellow
Write-Host "‚ö†Ô∏è  Note: This requires PostgreSQL to be running with the configured database and user" -ForegroundColor Cyan

try {
    $dbInfo = dotnet ef dbcontext info --verbose 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Database context is configured correctly" -ForegroundColor Green
        Write-Host "üìã Database info:" -ForegroundColor Cyan
        Write-Host $dbInfo
    } else {
        Write-Host "‚ö†Ô∏è  Database context check failed (this is expected if PostgreSQL is not running)" -ForegroundColor Yellow
        Write-Host "   Error: $dbInfo" -ForegroundColor Gray
    }
} catch {
    Write-Host "‚ö†Ô∏è  Database connectivity test failed: $_" -ForegroundColor Yellow
    Write-Host "   This is expected if PostgreSQL is not running or not configured" -ForegroundColor Gray
}

Write-Host

# List migrations
Write-Host "4Ô∏è‚É£ Checking migrations..." -ForegroundColor Yellow
try {
    $migrations = dotnet ef migrations list 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Migrations are configured:" -ForegroundColor Green
        Write-Host $migrations -ForegroundColor Cyan
    } else {
        Write-Host "‚ùå Error listing migrations: $migrations" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå Error checking migrations: $_" -ForegroundColor Red
}

Write-Host

# Summary
Write-Host "üéØ Setup Summary:" -ForegroundColor Green
Write-Host "   ‚Ä¢ .NET 9 Web API with Entity Framework Core ‚úÖ" -ForegroundColor White
Write-Host "   ‚Ä¢ PostgreSQL provider configured ‚úÖ" -ForegroundColor White
Write-Host "   ‚Ä¢ User and Team entities created ‚úÖ" -ForegroundColor White
Write-Host "   ‚Ä¢ Initial migration generated ‚úÖ" -ForegroundColor White
Write-Host "   ‚Ä¢ Controllers for API endpoints ‚úÖ" -ForegroundColor White
Write-Host "   ‚Ä¢ Database health check endpoint ‚úÖ" -ForegroundColor White

Write-Host
Write-Host "üìö Next Steps:" -ForegroundColor Yellow
Write-Host "   1. Install and configure PostgreSQL if not already done" -ForegroundColor White
Write-Host "   2. Create database and user as described in the README" -ForegroundColor White
Write-Host "   3. Run: dotnet ef database update" -ForegroundColor White
Write-Host "   4. Start the API: dotnet run" -ForegroundColor White
Write-Host "   5. Test endpoints at https://localhost:5001" -ForegroundColor White

Write-Host
Write-Host "üîó Documentation:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ Backend README: ../README.md" -ForegroundColor White
Write-Host "   ‚Ä¢ Database Migration Instructions: ../../.github/instructions/database-migration.instructions.md" -ForegroundColor White

Write-Host
Write-Host "‚ú® Database setup verification complete!" -ForegroundColor Green
